; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23918.0 

	TITLE	G:\Projects\Lotion\Lotion\spritebatch.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	?LoadTexture@@YAIPBD@Z				; LoadTexture
PUBLIC	?DrawRect@@YAXVVector2@@HH@Z			; DrawRect
PUBLIC	?DrawRect@@YAXVVector2@@HHQAM@Z			; DrawRect
PUBLIC	?DrawRect@@YAXIVVector2@@HH@Z			; DrawRect
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0BK@NAIEKJCC@SOIL?5loading?5error?3?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4072c00000000000
PUBLIC	__real@4079000000000000
PUBLIC	__real@437f0000
EXTRN	__imp__glEnable@4:PROC
EXTRN	__imp__glDisable@4:PROC
EXTRN	__imp__glBegin@4:PROC
EXTRN	__imp__glEnd@0:PROC
EXTRN	__imp__glVertex2d@16:PROC
EXTRN	__imp__glVertex2f@8:PROC
EXTRN	__imp__glColor3f@12:PROC
EXTRN	__imp__glTexCoord2f@8:PROC
EXTRN	__imp__glBindTexture@8:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	??0Vector2@@QAE@NN@Z:PROC			; Vector2::Vector2
EXTRN	??YVector2@@QAE?AV0@V0@@Z:PROC			; Vector2::operator+=
EXTRN	??ZVector2@@QAE?AV0@V0@@Z:PROC			; Vector2::operator-=
EXTRN	_SOIL_load_OGL_texture:PROC
EXTRN	_SOIL_last_result:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@4079000000000000
CONST	SEGMENT
__real@4079000000000000 DQ 04079000000000000r	; 400
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BK@NAIEKJCC@SOIL?5loading?5error?3?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BK@NAIEKJCC@SOIL?5loading?5error?3?5?8?$CFs?8?6?$AA@ DB 'SOIL load'
	DB	'ing error: ''%s''', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\projects\lotion\lotion\spritebatch.cpp
;	COMDAT ?DrawRect@@YAXIVVector2@@HH@Z
_TEXT	SEGMENT
$T1 = -372						; size = 16
$T2 = -348						; size = 16
$T3 = -324						; size = 16
$T4 = -300						; size = 16
_x$5 = -84						; size = 4
_vectors$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_texture$ = 8						; size = 4
_position$ = 12						; size = 16
_width$ = 28						; size = 4
_height$ = 32						; size = 4
?DrawRect@@YAXIVVector2@@HH@Z PROC			; DrawRect, COMDAT

; 40   : void DrawRect(GLuint texture, Vector2 position, int width, int height) {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 41   : 	Vector2 vectors[4]{
; 42   : 		Vector2(0, 0),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 43   : 		Vector2(1, 0),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp+16]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 44   : 		Vector2(1, 1),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp+32]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 45   : 		Vector2(0, 1)

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp+48]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 46   : 	};
; 47   : 
; 48   : 	glEnable(GL_TEXTURE_2D);

	mov	esi, esp
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glEnable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 49   : 	glBindTexture(GL_TEXTURE_2D, texture);

	mov	esi, esp
	mov	eax, DWORD PTR _texture$[ebp]
	push	eax
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glBindTexture@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 50   : 	glBegin(GL_QUADS);

	mov	esi, esp
	push	7
	call	DWORD PTR __imp__glBegin@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 51   : 	glColor3f(255, 255, 255);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glColor3f@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 52   : 	for (int x = 0; x < 4; x++) {

	mov	DWORD PTR _x$5[ebp], 0
	jmp	SHORT $LN4@DrawRect
$LN2@DrawRect:
	mov	eax, DWORD PTR _x$5[ebp]
	add	eax, 1
	mov	DWORD PTR _x$5[ebp], eax
$LN4@DrawRect:
	cmp	DWORD PTR _x$5[ebp], 4
	jge	$LN3@DrawRect

; 53   : 		glTexCoord2f(vectors[x].x, vectors[x].y);

	mov	eax, DWORD PTR _x$5[ebp]
	shl	eax, 4
	cvtsd2ss xmm0, QWORD PTR _vectors$[ebp+eax+8]
	mov	esi, esp
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$5[ebp]
	shl	ecx, 4
	cvtsd2ss xmm0, QWORD PTR _vectors$[ebp+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glTexCoord2f@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 54   : 		vectors[x].x *= width;

	mov	eax, DWORD PTR _x$5[ebp]
	shl	eax, 4
	cvtsi2sd xmm0, DWORD PTR _width$[ebp]
	mulsd	xmm0, QWORD PTR _vectors$[ebp+eax]
	mov	ecx, DWORD PTR _x$5[ebp]
	shl	ecx, 4
	movsd	QWORD PTR _vectors$[ebp+ecx], xmm0

; 55   : 		vectors[x].y *= height;

	mov	eax, DWORD PTR _x$5[ebp]
	shl	eax, 4
	cvtsi2sd xmm0, DWORD PTR _height$[ebp]
	mulsd	xmm0, QWORD PTR _vectors$[ebp+eax+8]
	mov	ecx, DWORD PTR _x$5[ebp]
	shl	ecx, 4
	movsd	QWORD PTR _vectors$[ebp+ecx+8], xmm0

; 56   : 		vectors[x] += Vector2(position.x, position.y);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _position$[ebp+8]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _position$[ebp]
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$5[ebp]
	shl	edx, 4
	lea	ecx, DWORD PTR _vectors$[ebp+edx]
	call	??YVector2@@QAE?AV0@V0@@Z		; Vector2::operator+=

; 57   : 		vectors[x] -= Vector2(SCREENWIDTH / 2, SCREENHEIGHT / 2);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4072c00000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4079000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$5[ebp]
	shl	edx, 4
	lea	ecx, DWORD PTR _vectors$[ebp+edx]
	call	??ZVector2@@QAE?AV0@V0@@Z		; Vector2::operator-=

; 58   : 
; 59   : 		glVertex2f(vectors[x].x, vectors[x].y);

	mov	eax, DWORD PTR _x$5[ebp]
	shl	eax, 4
	cvtsd2ss xmm0, QWORD PTR _vectors$[ebp+eax+8]
	mov	esi, esp
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$5[ebp]
	shl	ecx, 4
	cvtsd2ss xmm0, QWORD PTR _vectors$[ebp+ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glVertex2f@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 60   : 	}

	jmp	$LN2@DrawRect
$LN3@DrawRect:

; 61   : 	glEnd();

	mov	esi, esp
	call	DWORD PTR __imp__glEnd@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 62   : 	glDisable(GL_TEXTURE_2D);

	mov	esi, esp
	push	3553					; 00000de1H
	call	DWORD PTR __imp__glDisable@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 63   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DrawRect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@DrawRect:
	DD	1
	DD	$LN7@DrawRect
$LN7@DrawRect:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN6@DrawRect
$LN6@DrawRect:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
?DrawRect@@YAXIVVector2@@HH@Z ENDP			; DrawRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\projects\lotion\lotion\spritebatch.cpp
;	COMDAT ?DrawRect@@YAXVVector2@@HHQAM@Z
_TEXT	SEGMENT
$T1 = -372						; size = 16
$T2 = -348						; size = 16
$T3 = -324						; size = 16
$T4 = -300						; size = 16
_x$5 = -84						; size = 4
_vectors$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_position$ = 8						; size = 16
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_color$ = 32						; size = 4
?DrawRect@@YAXVVector2@@HHQAM@Z PROC			; DrawRect, COMDAT

; 65   : void DrawRect(Vector2 position, int width, int height, float color[3]) {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 66   : 	Vector2 vectors[4]{
; 67   : 		Vector2(0, 0),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 68   : 		Vector2(1, 0),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp+16]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 69   : 		Vector2(1, 1),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp+32]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 70   : 		Vector2(0, 1)

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp+48]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 71   : 	};
; 72   : 
; 73   : 	glBegin(GL_QUADS);

	mov	esi, esp
	push	7
	call	DWORD PTR __imp__glBegin@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 74   : 	glColor3f(color[0], color[1], color[2]);

	mov	eax, 4
	shl	eax, 1
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _color$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _color$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glColor3f@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 75   : 	for (int x = 0; x < 4; x++) {

	mov	DWORD PTR _x$5[ebp], 0
	jmp	SHORT $LN4@DrawRect
$LN2@DrawRect:
	mov	eax, DWORD PTR _x$5[ebp]
	add	eax, 1
	mov	DWORD PTR _x$5[ebp], eax
$LN4@DrawRect:
	cmp	DWORD PTR _x$5[ebp], 4
	jge	$LN3@DrawRect

; 76   : 		vectors[x].x *= width;

	mov	eax, DWORD PTR _x$5[ebp]
	shl	eax, 4
	cvtsi2sd xmm0, DWORD PTR _width$[ebp]
	mulsd	xmm0, QWORD PTR _vectors$[ebp+eax]
	mov	ecx, DWORD PTR _x$5[ebp]
	shl	ecx, 4
	movsd	QWORD PTR _vectors$[ebp+ecx], xmm0

; 77   : 		vectors[x].y *= height;

	mov	eax, DWORD PTR _x$5[ebp]
	shl	eax, 4
	cvtsi2sd xmm0, DWORD PTR _height$[ebp]
	mulsd	xmm0, QWORD PTR _vectors$[ebp+eax+8]
	mov	ecx, DWORD PTR _x$5[ebp]
	shl	ecx, 4
	movsd	QWORD PTR _vectors$[ebp+ecx+8], xmm0

; 78   : 		vectors[x] += Vector2(position.x, position.y);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _position$[ebp+8]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _position$[ebp]
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$5[ebp]
	shl	edx, 4
	lea	ecx, DWORD PTR _vectors$[ebp+edx]
	call	??YVector2@@QAE?AV0@V0@@Z		; Vector2::operator+=

; 79   : 		vectors[x] -= Vector2(SCREENWIDTH / 2, SCREENHEIGHT / 2);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4072c00000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4079000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$5[ebp]
	shl	edx, 4
	lea	ecx, DWORD PTR _vectors$[ebp+edx]
	call	??ZVector2@@QAE?AV0@V0@@Z		; Vector2::operator-=

; 80   : 
; 81   : 		glVertex2d(vectors[x].x, vectors[x].y);

	mov	eax, DWORD PTR _x$5[ebp]
	shl	eax, 4
	mov	esi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR _vectors$[ebp+eax+8]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$5[ebp]
	shl	ecx, 4
	sub	esp, 8
	movsd	xmm0, QWORD PTR _vectors$[ebp+ecx]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glVertex2d@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 82   : 	}

	jmp	$LN2@DrawRect
$LN3@DrawRect:

; 83   : 	glEnd();

	mov	esi, esp
	call	DWORD PTR __imp__glEnd@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 84   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DrawRect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@DrawRect:
	DD	1
	DD	$LN7@DrawRect
$LN7@DrawRect:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN6@DrawRect
$LN6@DrawRect:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
?DrawRect@@YAXVVector2@@HHQAM@Z ENDP			; DrawRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\projects\lotion\lotion\spritebatch.cpp
;	COMDAT ?DrawRect@@YAXVVector2@@HH@Z
_TEXT	SEGMENT
$T1 = -372						; size = 16
$T2 = -348						; size = 16
$T3 = -324						; size = 16
$T4 = -300						; size = 16
_x$5 = -84						; size = 4
_vectors$ = -72						; size = 64
__$ArrayPad$ = -4					; size = 4
_position$ = 8						; size = 16
_width$ = 24						; size = 4
_height$ = 28						; size = 4
?DrawRect@@YAXVVector2@@HH@Z PROC			; DrawRect, COMDAT

; 19   : void DrawRect(Vector2 position, int width, int height) {

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-376]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20   : 	Vector2 vectors[4]{
; 21   : 		Vector2(0, 0),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 22   : 		Vector2(1, 0),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp+16]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 23   : 		Vector2(1, 1),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp+32]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 24   : 		Vector2(0, 1)

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vectors$[ebp+48]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2

; 25   : 	};
; 26   : 
; 27   : 	glBegin(GL_QUADS);

	mov	esi, esp
	push	7
	call	DWORD PTR __imp__glBegin@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 28   : 	glColor3f(255, 255, 255);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glColor3f@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 29   : 	for (int x = 0; x < 4; x++) {

	mov	DWORD PTR _x$5[ebp], 0
	jmp	SHORT $LN4@DrawRect
$LN2@DrawRect:
	mov	eax, DWORD PTR _x$5[ebp]
	add	eax, 1
	mov	DWORD PTR _x$5[ebp], eax
$LN4@DrawRect:
	cmp	DWORD PTR _x$5[ebp], 4
	jge	$LN3@DrawRect

; 30   : 		vectors[x].x *= width;

	mov	eax, DWORD PTR _x$5[ebp]
	shl	eax, 4
	cvtsi2sd xmm0, DWORD PTR _width$[ebp]
	mulsd	xmm0, QWORD PTR _vectors$[ebp+eax]
	mov	ecx, DWORD PTR _x$5[ebp]
	shl	ecx, 4
	movsd	QWORD PTR _vectors$[ebp+ecx], xmm0

; 31   : 		vectors[x].y *= height;

	mov	eax, DWORD PTR _x$5[ebp]
	shl	eax, 4
	cvtsi2sd xmm0, DWORD PTR _height$[ebp]
	mulsd	xmm0, QWORD PTR _vectors$[ebp+eax+8]
	mov	ecx, DWORD PTR _x$5[ebp]
	shl	ecx, 4
	movsd	QWORD PTR _vectors$[ebp+ecx+8], xmm0

; 32   : 		vectors[x] += Vector2(position.x, position.y);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _position$[ebp+8]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _position$[ebp]
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$5[ebp]
	shl	edx, 4
	lea	ecx, DWORD PTR _vectors$[ebp+edx]
	call	??YVector2@@QAE?AV0@V0@@Z		; Vector2::operator+=

; 33   : 		vectors[x] -= Vector2(SCREENWIDTH / 2, SCREENHEIGHT / 2);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4072c00000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4079000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0Vector2@@QAE@NN@Z			; Vector2::Vector2
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$5[ebp]
	shl	edx, 4
	lea	ecx, DWORD PTR _vectors$[ebp+edx]
	call	??ZVector2@@QAE?AV0@V0@@Z		; Vector2::operator-=

; 34   : 
; 35   : 		glVertex2d(vectors[x].x, vectors[x].y);

	mov	eax, DWORD PTR _x$5[ebp]
	shl	eax, 4
	mov	esi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR _vectors$[ebp+eax+8]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$5[ebp]
	shl	ecx, 4
	sub	esp, 8
	movsd	xmm0, QWORD PTR _vectors$[ebp+ecx]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp__glVertex2d@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 36   : 	}

	jmp	$LN2@DrawRect
$LN3@DrawRect:

; 37   : 	glEnd();

	mov	esi, esp
	call	DWORD PTR __imp__glEnd@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 38   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DrawRect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 376				; 00000178H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@DrawRect:
	DD	1
	DD	$LN7@DrawRect
$LN7@DrawRect:
	DD	-72					; ffffffb8H
	DD	64					; 00000040H
	DD	$LN6@DrawRect
$LN6@DrawRect:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
?DrawRect@@YAXVVector2@@HH@Z ENDP			; DrawRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\projects\lotion\lotion\spritebatch.cpp
;	COMDAT ?LoadTexture@@YAIPBD@Z
_TEXT	SEGMENT
_texture$ = -8						; size = 4
_path$ = 8						; size = 4
?LoadTexture@@YAIPBD@Z PROC				; LoadTexture, COMDAT

; 3    : GLuint LoadTexture(const char* path) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4    : 	GLuint texture = SOIL_load_OGL_texture(

	push	178					; 000000b2H
	push	0
	push	0
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	call	_SOIL_load_OGL_texture
	add	esp, 16					; 00000010H
	mov	DWORD PTR _texture$[ebp], eax

; 5    : 		path,
; 6    : 		SOIL_LOAD_AUTO,
; 7    : 		SOIL_CREATE_NEW_ID,
; 8    : 		SOIL_FLAG_MIPMAPS | SOIL_FLAG_INVERT_Y | SOIL_FLAG_NTSC_SAFE_RGB | SOIL_FLAG_COMPRESS_TO_DXT
; 9    : 	);
; 10   : 
; 11   : 	if (0 == texture) {

	cmp	DWORD PTR _texture$[ebp], 0
	jne	SHORT $LN2@LoadTextur

; 12   : 		printf("SOIL loading error: '%s'\n", SOIL_last_result());

	call	_SOIL_last_result
	push	eax
	push	OFFSET ??_C@_0BK@NAIEKJCC@SOIL?5loading?5error?3?5?8?$CFs?8?6?$AA@
	call	_printf
	add	esp, 8

; 13   : 		return -1;

	or	eax, -1
	jmp	SHORT $LN1@LoadTextur
$LN2@LoadTextur:

; 14   : 	}
; 15   : 
; 16   : 	return texture;

	mov	eax, DWORD PTR _texture$[ebp]
$LN1@LoadTextur:

; 17   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadTexture@@YAIPBD@Z ENDP				; LoadTexture
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

	call	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 955  :     __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 956  :     return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 957  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 144  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 640  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\projects\lotion\lotion\spritebatch.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\projects\lotion\lotion\spritebatch.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 85   : }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
